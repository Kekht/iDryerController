[platformio]
;******************************************
; - необходим VSCode c настроенным pio! 
; - если такой возможности нет
; нужна Arduino nano с установленным MiniCore
; это можно сделать по инструкции
; https://github.com/MCUdude/MiniCore#how-to-install
; в этом случае шаги 1.1 и 1.2 нужно пропустить

;!!!!!!!!!! if you use USB ASP !!!!!!!!!!!!!
;*********** step 1 ************
;default_envs = fuses_bootloader
    ; in terminal
    ;1.1  pio run -e fuses_bootloader -t fuses (enter)
    ;1.2  pio run -e fuses_bootloader -t bootloader (enter)
    ;1.3  next step

;!!!!!!!!!! FOR ALL !!!!!!!!!!!!!
;*********** step 2 ************
; check the USB port end edit string 77

;*********** step 3 ************
;pio run -e Upload_ISP -t upload
;pio run -e eep -t uploadeep

;*********** step 4 ************
; Run and enjoy)

;default_envs = nanoatmega328new
default_envs = Upload_ISP
;default_envs = eep
; src_dir = optiboot

[env]
platform = atmelavr
framework = arduino
board_build.f_cpu = 16000000L
; build_unflags = -flto
build_flags = 
monitor_port = ${env:Upload_UART.upload_port}
monitor_speed = 9600
lib_deps = 
            ; GyverLibs/EncButton
            ; GyverLibs/GyverButton
            ; gyverlibs/GyverEncoder
            ; GyverLibs/GyverTimers
            ; GyverLibs/GyverPID
            ; GyverLibs/GyverBME280
            ; olikraus/U8g2
            ; miguel5612/ThermistorLibrary
lib_ignore = Wire1

[env:nanoatmega328new]
upload_protocol = arduino
board = nanoatmega328new
upload_port = ${env:Upload_UART.upload_port}
upload_speed = 115200

; pio run -e eep -t upload
[env:eep]
platform = atmelavr
board = ATmega328P
framework = arduino
upload_port = usb
upload_protocol = usbasp
upload_flags =
    -C
    ; use "tool-avrdude-megaavr" for the atmelmegaavr platform
    ${platformio.packages_dir}/tool-avrdude/avrdude.conf
    -p
    $BOARD_MCU
    -P
	$UPLOAD_PORT
    -c
    usbasp
upload_command = avrdude $UPLOAD_FLAGS -U flash:w:$SOURCE:i
board_upload.extra_flags = 

[env:Upload_UART]
upload_protocol = arduino
board = ATmega328P
upload_port = /dev/tty.usbserial-1420
board_upload.speed = ${env:fuses_bootloader.board_bootloader.speed}

[env:Upload_ISP]
upload_protocol = custom
board = ATmega328P
upload_flags =
  -C$PROJECT_PACKAGES_DIR/tool-avrdude/avrdude.conf
  -p$BOARD_MCU
  -PUSB
  -cusbasp
upload_command = avrdude $UPLOAD_FLAGS -U flash:w:$SOURCE:i


; Run the following command to set fuses
; pio run -e fuses_bootloader -t fuses
; Run the following command to set fuses + burn bootloader
; pio run -e fuses_bootloader -t bootloader
[env:fuses_bootloader]
board = ATmega328P
board_hardware.oscillator = external ; Oscillator type
board_hardware.uart = uart0          ; Set UART to use for serial upload
board_bootloader.speed = 115200      ; Set bootloader baud rate
board_hardware.bod = 2.7v            ; Set brown-out detection
board_hardware.eesave = yes          ; Preserve EEPROM when uploading using programmer
upload_protocol = usbasp             ; Use the USBasp as programmer
upload_flags =                       ; Select USB as upload port and divide the SPI clock by 8
  -PUSB
  -B8



























; [env]
; platform = atmelavr
; framework = arduino

; upload_port = /dev/tty.usbserial-1430  
; monitor_port = /dev/tty.usbserial-1430  
; upload_speed = 115200
; monitor_speed = 115200



; [env:ATmega328P]
; board = ATmega328P

; [env:nanoatmega328]
; board = nanoatmega328

; [env:nanoatmega328new]
; board = nanoatmega328new


; ;run -t bootloader -v
; [env:BOOTLOADER]
; upload_speed = 57600
; board_bootloader.file = optiboot/optiboot_atmega328.hex

; ;board_build.f_cpu = 16000000L
; board_bootloader.lfuse = 0xFF ;0xFF
; board_bootloader.hfuse = 0xDC ;0xDE
; board_bootloader.efuse = 0xFD ;0xFD
; board_bootloader.lock_bits = 0x0F
; board_bootloader.unlock_bits = 0x3F
; upload_protocol = custom
; upload_flags =
;     -C
;     ; use "tool-avrdude-megaavr" for the atmelmegaavr platform
;     ${platformio.packages_dir}/tool-avrdude/avrdude.conf
;     ; -p$BOARD_MCU
;     -pm328p
;     -P$UPLOAD_PORT
;     -b$UPLOAD_SPEED
;     -cstk500v1 ;stk500v1
; upload_command = avrdude $UPLOAD_FLAGS -U flash:w:$SOURCE:i


; ;https://docs.platformio.org/en/latest/platforms/atmelavr.html#upload-using-programmer
; [env:ISP_FW_TEST]
; upload_protocol = custom
; upload_flags =
;     -C
;     ; use "tool-avrdude-megaavr" for the atmelmegaavr platform
;     ${platformio.packages_dir}/tool-avrdude/avrdude.conf
;     -p$BOARD_MCU
;     -P$UPLOAD_PORT
;     -b$UPLOAD_SPEED
;     -cstk500v1 ;stk500v1
; upload_command = avrdude $UPLOAD_FLAGS -U flash:w:$SOURCE:i

; ;   arduinoisp       = Arduino ISP Programmer
; ;   arduinoisporg    = Arduino ISP Programmer
; ;   avrisp           = Atmel AVR ISP
; ;   avrisp2          = Atmel AVR ISP mkII
; ;   avrispmkII       = Atmel AVR ISP mkII
; ;   avrispv2         = Atmel AVR ISP V2